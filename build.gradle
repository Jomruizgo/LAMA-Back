plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.hackaton'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mapstruct:mapstruct:1.6.0'
	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '8.0.1.Final'
	implementation 'com.auth0:java-jwt:4.4.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	reports {
		html.required = true
	}

	// Configuración para excluir la clase de modelo
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, excludes: ['**/model/**', '**/util/**', '**/configuration/**','**/MsvcUserApplication.class'])
	}))
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.20 // Configura el umbral de cobertura (85% es el mínimo usado en Pragma)
			}
		}
	}
}

// Asegúrate de que la verificación de cobertura se ejecute después de las pruebas
check.dependsOn jacocoTestCoverageVerification
